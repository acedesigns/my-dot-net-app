@page "/posts"
@using MyApi.Models
@inject IHttpClientFactory ClientFactory

<h1>Posts</h1>

@if (posts == null) {
    <p><em>Loading...</em></p>
} else {
    <div class="container">
        <div class="row">
            @foreach (var post in posts.OrderByDescending(p => p.CreatedAt))
            {
                <div class="col-md-6 mb-3">
                    <div class="card h-100">
                        <div class="card-body">
                            <h5 class="card-title">@post.Title</h5>
                            <p class="card-text">@post.Content</p>
                            <p class="card-text"><small class="text-muted">Likes: @post.Likes ?? 0</small></p>
                            <button class="btn btn-sm btn-outline-primary" @onclick="() => LikePost(post.Id)">Like</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}


@code {
    private List<Post>? posts;

    private HttpClient Http => ClientFactory.CreateClient("ServerAPI");

    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();
    }

    private async Task LoadPosts()
    {
        try
        {
            posts = await Http.GetFromJsonAsync<List<Post>>("api/post");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading posts: " + ex.Message);
        }
    }


    private async Task LikePost(int id)
    {
        try
        {
            // Make sure you have a /api/post/{id}/like endpoint in your Program.cs
            var response = await Http.PostAsync($"api/post/{id}/like", null);
            if (response.IsSuccessStatusCode)
            {
                await LoadPosts();
            }
            else
            {
                Console.WriteLine("Failed to like post: " + response.ReasonPhrase);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error liking post: " + ex.Message);
        }
    }
}